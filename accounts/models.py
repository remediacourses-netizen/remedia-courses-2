from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager
from django.db import models


class CustomUserManager(BaseUserManager):

    
    def create_user(self, username, password=None, **extra_fields):
        if not username:
            raise ValueError('–õ–æ–≥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
        user = self.model(username=username, **extra_fields)
        user.set_password(password)
        user.save()
        return user

    def create_superuser(self, username, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(username, password, **extra_fields)

class Subject(models.Model):
    name = models.CharField(max_length=100, unique=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞')

    def __str__(self):
        return self.name
    class Meta:
        verbose_name_plural = "–ö—É—Ä—Å—ã"
    
class CustomUser(AbstractBaseUser, PermissionsMixin):
    # –¢–µ–∫—É—â–∏–µ –ø–æ–ª—è
    is_student = models.BooleanField(default=False, verbose_name='–û–Ω/–æ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç')
    is_teacher = models.BooleanField(default=False, verbose_name='–û–Ω/–æ–Ω–∞ —É—á–∏—Ç–µ–ª—å')
    username = models.CharField(max_length=150, unique=True, null=False, blank=False, verbose_name='–õ–æ–≥–∏–Ω')
    first_name = models.CharField(max_length=100, verbose_name='–ò–º—è')
    last_name = models.CharField(max_length=100, verbose_name='–§–∞–º–∏–ª–∏—è')
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    # üîª –ù–æ–≤—ã–µ –ø–æ–ª—è
    subjects_taught = models.ManyToManyField(Subject, blank=True, related_name='teachers', verbose_name='–ü—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω/–æ–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç—å')
    subjects = models.ManyToManyField(Subject, blank=True, help_text="–ü—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞–µ—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    teachers = models.ManyToManyField('self', symmetrical=False, blank=True, related_name='students', help_text="–£—á–∏—Ç–µ–ª—è, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–æ–º")

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['first_name', 'last_name']

    objects = CustomUserManager()
    def mark_as_student(self):
        self.is_student = True
        self.is_teacher = False
        self.save()

    def mark_as_teacher(self):
        self.is_teacher = True
        self.is_student = False
        self.save()

    def get_full_name(self):
        full_name = f"{self.first_name} {self.last_name}".strip()
        return full_name or None

    def get_teacher_for_subject(self, subject):
        """
        –ù–∞–π—Ç–∏ —É—á–∏—Ç–µ–ª—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏–∑ —Ç–µ—Ö, –∫–æ–≥–æ –≤—ã–±—Ä–∞–ª —É—á–µ–Ω–∏–∫
        """
        for teacher in self.teachers.all():
            if subject in teacher.subjects.all():
                return teacher
        return None

    def __str__(self):
        return self.username or "(–±–µ–∑ –ª–æ–≥–∏–Ω–∞)"
    
    class Meta:
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"



class UserSubject(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, verbose_name='–£—á–µ–Ω–∏–∫')
    subject = models.ForeignKey(Subject, on_delete=models.CASCADE, verbose_name='–ö—É—Ä—Å')
    teacher = models.ForeignKey(
        CustomUser,
        on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name='assigned_students',
        verbose_name='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'
    )

    def __str__(self):
        if self.user.is_student:
            return f"{self.user.get_full_name()} ‚Üí {self.subject} (–ø—Ä–µ–ø: {self.teacher.get_full_name() if self.teacher else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'})"
        else:
            return f"{self.user.get_full_name()} ‚Üí {self.subject} (–∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)"
        
    class Meta:
        verbose_name_plural = "–°–≤—è–∑—å —É—á–µ–Ω–∏–∫‚û°Ô∏è—É—á–∏—Ç–µ–ª—å"

# Create your models here.
